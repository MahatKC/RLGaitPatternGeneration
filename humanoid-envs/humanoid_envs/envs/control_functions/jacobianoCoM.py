import numpy as np

from humanoid_envs.envs.control_functions.dualQuatMult import dualQuatMult
from humanoid_envs.envs.control_functions.globalVariables import GlobalVariables
from humanoid_envs.envs.control_functions.kinematicModel import KinematicModel


def jacobiano2(theta, hOrg, hP, xe, leg):
    # -----------------------------------------------------------
    # c�lculo das derivadas para cada vari�vel de controle
    # ----------------------------------------------------------
    z = np.zeros((8, 1))
    thetar = theta[:, 0].reshape((6, 1))
    thetal = theta[:, 1].reshape((6, 1))
    glob = GlobalVariables()
    MDH_right = glob.getMDH_right()
    MDH_left = glob.getMDH_left()

    ##################################j1##################################
    if leg == 0:  # right leg
        h = dualQuatMult(hP, KinematicModel(MDH_right, thetar, 6, 0))  # da base global até a junta 6
        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j0 = dualQuatMult(z, xe)

        ##################################j1##################################
        h = dualQuatMult(hP, KinematicModel(MDH_right, thetar, 5, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j1 = dualQuatMult(z, xe)

        ##################################j2##################################
        h = dualQuatMult(hP, KinematicModel(MDH_right, thetar, 4, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j2 = dualQuatMult(z, xe)

        ##################################j3##################################
        h = dualQuatMult(hP, KinematicModel(MDH_right, thetar, 3, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j3 = dualQuatMult(z, xe)

        ##################################j4##################################
        h = dualQuatMult(hP, KinematicModel(MDH_right, thetar, 2, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j4 = dualQuatMult(z, xe)

        ##################################j5##################################
        h = dualQuatMult(hP, KinematicModel(MDH_right, thetar, 1, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j5 = dualQuatMult(z, xe)
    else:
        h = dualQuatMult(hP, KinematicModel(MDH_left, thetal, 6, 0))  # da base global até a junta 6
        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j0 = dualQuatMult(z, xe)

        ##################################j1##################################
        h = dualQuatMult(hP, KinematicModel(MDH_left, thetal, 5, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j1 = dualQuatMult(z, xe)

        ##################################j2##################################
        h = dualQuatMult(hP, KinematicModel(MDH_left, thetal, 4, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j2 = dualQuatMult(z, xe)

        ##################################j3##################################
        h = dualQuatMult(hP, KinematicModel(MDH_left, thetal, 3, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j3 = dualQuatMult(z, xe)

        ##################################j4##################################
        h = dualQuatMult(hP, KinematicModel(MDH_left, thetal, 2, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j4 = dualQuatMult(z, xe)

        ##################################j5##################################
        h = dualQuatMult(hP, KinematicModel(MDH_left, thetal, 1, 0))

        z[1, 0] = h[1, 0] * h[3, 0] + h[0, 0] * h[2, 0]
        z[2, 0] = h[2, 0] * h[3, 0] - h[0, 0] * h[1, 0]
        z[3, 0] = (h[3, 0] ** 2 - h[2, 0] ** 2 - h[1, 0] ** 2 + h[0, 0] ** 2) / 2
        z[5, 0] = h[1, 0] * h[7, 0] + h[5, 0] * h[3, 0] + h[0, 0] * h[6, 0] + h[4, 0] * h[2, 0]
        z[6, 0] = h[2, 0] * h[7, 0] + h[6, 0] * h[3, 0] - h[0, 0] * h[5, 0] - h[4, 0] * h[1, 0]
        z[7, 0] = h[3, 0] * h[7, 0] - h[2, 0] * h[6, 0] - h[1, 0] * h[5, 0] + h[0, 0] * h[4, 0]

        j5 = dualQuatMult(z, xe)

    jac = np.concatenate((-j5, -j4, -j3, -j2, -j1, -j0), axis=1)

    return jac
